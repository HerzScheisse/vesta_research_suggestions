<?php
//adapted from webtrees.js: webtrees.initializeTomSelect 
?>

<script>
webtrees.initializeTomSelectSWS = function (element) {
    var defaultUrl = element.dataset.defaultUrl;
    var adjustedUrl = element.dataset.adjustedUrl;
    
    let lio = element.id.lastIndexOf("-");
    let tag = (lio === -1)?null:element.id.substring(lio+1).replace("INDI:", "").replace("FAM:", "").replace(":SOUR", "");
    //console.log("sws for "+tag);
    
    var ts = null;
    var options = {};

    let plugins = ['dropdown_input', 'virtual_scroll'];
    if (element.multiple) {
      plugins.push('remove_button');
    } else if (!element.required) {
      plugins.push('clear_button');
    }

    options = {
      plugins: plugins,
      render: {
        item: (data, escape) => '<div>' + data.text + '</div>',
        option: (data, escape) => '<div>' + data.text + '</div>',
      },
      maxOptions: false,
      firstUrl: query => 1,
      onDropdownOpen:function() {
        var ownDateInput = document.querySelector('[id$=' + tag + '\\:DATE]');
        var ownPlacInput = document.querySelector('[id$=' + tag + '\\:PLAC]');

        if ((tag !== null) && ownDateInput && ownPlacInput) {

            var dateValue = ownDateInput.value;
            var placValue = ownPlacInput.value;

            if (dateValue && placValue) {
                <?php
                //preload:'focus' does the same, but unconditionally
                //TODO: no_results doesn't render here! explicit ts.refreshOptions(); doesn't help
                ?>
                ts.load('');            
            }
        }
      },
      load: function (query, callback) {
        <?php
        //careful, calling this resets the pagination, i.e. do not call more than once!
        //https://github.com/orchidjs/tom-select/blob/master/src/plugins/virtual_scroll/plugin.ts
        //function is actually intended to manage the full url, but may just as well be used for pagination only!
        ?>
        var curr = this.getUrl(query);
        //console.log(curr);
        var next = curr+1;

        var thisUrl = defaultUrl;

        if (query === '') {
            <?php
            //note: we should get here only though onDropdownOpen, otherwise not triggered (e.g. by clearing input)
            ?>

            var ownDateInput = document.querySelector('[id$=' + tag + '\\:DATE]');
            var ownPlacInput = document.querySelector('[id$=' + tag + '\\:PLAC]');

            <?php
            //the view is used in several other places, e.g. via the favorites module, and in the 'merge records' dialog,
            //and as a standalone fact (which is not distinguishable here!).
            //in these cases, or if required inputs aren't set, use standard functionality!
            ?>

            if ((tag !== null) && ownDateInput && ownPlacInput) {

                var tagValue = tag;
                var dateValue = ownDateInput.value;
                var placValue = ownPlacInput.value;

                if (dateValue && placValue) {
                    var ownGovInput = document.querySelector('[id$=' + tag + '\\:PLAC\\:_GOV]');
                    var ownLocInput = document.querySelector('[id$=' + tag + '\\:PLAC\\:_LOC]');

                    var govValue = ownGovInput?ownGovInput.value:"";
                    var locValue = ownLocInput?ownLocInput.value:"";

                    var gedcom = "1 "+ tagValue + "\n2 DATE " + dateValue + "\n2 PLAC " + placValue;
                    if (govValue) {
                        gedcom += "\n3 _GOV " + govValue;
                    } 
                    if (locValue) {
                        gedcom += "\n3 _LOC @" + locValue + "@";
                    }

                    thisUrl = adjustedUrl;
                    query = gedcom;
                }
            }
        }

        <?php
        //safer to use api. Do not encodeURIComponent, that's done internally!
        ?>
        var url_ = new URL(thisUrl);
        url_.searchParams.set('page', curr);
        url_.searchParams.set('query', query);

        var fullUrl = url_.href;
        //console.log(fullUrl);

        fetch(fullUrl)
          .then(response => response.json())
          .then(json => {
            if (json.nextUrl !== null) {
                <?php
                //we paginate ourselves, and use json.nextUrl only as a flag
                ?>
                this.setNextUrl(query, next);
            }

            callback(json.data);
          })
          .catch(callback);
      },
    };

    ts = new TomSelect(element, options);
    return ts;
}
</script>



